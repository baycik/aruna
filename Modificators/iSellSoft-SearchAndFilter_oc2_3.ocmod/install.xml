<modification>
    <name>iSellSoft SearchAndFilter</name>
    <code>iSellSoft-SearchAndFilter</code>
    <version>1.0</version>
    <author>iSellSoft Team</author>
    <file path="catalog/controller/product/category.php">
	<operation error="skip"> 
	    <search><![CDATA[$product_total = $this->model_catalog_product->getTotalProducts($filter_data);]]></search>
	    <add offset="0" position="before"><![CDATA[
                        if (isset($this->request->get['search'])) {
                            $filter_data['filter_name']=$this->request->get['search'];
                        }
                        if (isset($this->request->get['min'])) {
                            $filter_data['filter_min']=$this->request->get['min'];
                        }
                        if (isset($this->request->get['max'])) {
                            $filter_data['filter_max']=$this->request->get['max'];
                        }
            ]]></add>
	</operation>
	<operation error="skip"> 
	    <search><![CDATA[
			if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			}
            ]]></search>
	    <add offset="0" position="before"><![CDATA[
                        if (isset($this->request->get['search'])) {
                            $url .= '&search=' . $this->request->get['search'];
                        }
                        if (isset($this->request->get['min'])) {
                            $url .= '&min=' . $this->request->get['min'];
                        }
                        if (isset($this->request->get['max'])) {
                            $url .= '&max=' . $this->request->get['max'];
                        }
            ]]></add>
	</operation>
    </file>
    <file path="catalog/controller/product/search.php">
	<operation error="skip"> 
	    <search><![CDATA[$product_total = $this->model_catalog_product->getTotalProducts($filter_data);]]></search>
	    <add offset="0" position="before"><![CDATA[
                        if (isset($this->request->get['filter'])) {
                            $filter_data['filter_filter']=$this->request->get['filter'];
                        }
                        if (isset($this->request->get['min'])) {
                            $filter_data['filter_min']=$this->request->get['min'];
                        }
                        if (isset($this->request->get['max'])) {
                            $filter_data['filter_max']=$this->request->get['max'];
                        }
            ]]></add>
	</operation>
	<operation error="skip"> 
	    <search><![CDATA[
			if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			}
            ]]></search>
	    <add offset="0" position="before"><![CDATA[
                        if (isset($this->request->get['filter'])) {
                            $url .= '&filter=' . $this->request->get['filter'];
                        }
                        if (isset($this->request->get['min'])) {
                            $url .= '&min=' . $this->request->get['min'];
                        }
                        if (isset($this->request->get['max'])) {
                            $url .= '&max=' . $this->request->get['max'];
                        }
            ]]></add>
	</operation>
    </file>
    <file path="catalog/model/catalog/product.php">
	<operation error="skip"> 
	    <search><![CDATA[function getTotalProducts]]></search>
	    <add offset="0" position="replace"><![CDATA[function _getTotalProducts]]></add>
	</operation>
	<operation error="skip"> 
	    <search><![CDATA[function getProducts]]></search>
	    <add offset="0" position="replace"><![CDATA[function _getProducts]]></add>
	</operation>
	<operation error="skip"> 
	    <search><![CDATA[class ModelCatalogProduct extends Model {]]></search>
	    <add offset="0" position="after"><![CDATA[

        private function fillMatchedProducts($data=array()){
            if( !empty($this->registry->matches_filled) ){
                return true;
            }
            $this->language_id  =   (int)$this->config->get('config_language_id');
            $this->store_id     =   (int)$this->config->get('config_store_id');
            $sql_select="
                    p.product_id,
                    pd.name,
                    model,
                    quantity,
                    price,
                    @discount:=(SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND pd2.quantity = '1' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.priority ASC, pd2.price ASC LIMIT 1) 
                        AS discount,
                    (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) 
                        AS special,
                    ROUND((SELECT AVG(rating) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id) )
                        AS rating,
                    p.sort_order AS sort_order,
                    date_added";
            $sql_table="
                ".DB_PREFIX."product p
                    JOIN 
                ".DB_PREFIX."product_to_store p2s ON (p.product_id = p2s.product_id AND p2s.store_id = '$this->store_id')
                    JOIN
                ".DB_PREFIX."product_description pd ON (p.product_id = pd.product_id AND pd.language_id = '$this->language_id')";
            $sql_where="
                p.status = '1' 
                AND p.date_available <= NOW()";
            /////////////////////////////////////////////////////
            //SEARCH
            /////////////////////////////////////////////////////
            if( !empty($data['filter_name']) ){
                $search_query=$this->db->escape($data['filter_name']);
                $relevance=[
                    'code'=>25,
                    'tag'=>20,
                    'name'=>10,
                    'description'=>5
                ];
                $words= explode(" ", $search_query);
                $suggestion_search_query=$search_query.' ';
                $fallback_search_query='';
                foreach($words as $word){
                    $length=mb_strlen($word);
                    if($length>7){
                        $length_of_root=$length-3;
                    } else if($length>4){
                        $length_of_root=4;
                    } else {
                        $fallback_search_query.="$word%";
                        continue;
                    }
                    $suggestion_search_query.=" >".mb_substr($word, 0,$length_of_root)."*";
                }
                $relevance_treshold=5;
                $search_rankings="
                     {$relevance['code']} *MATCH (model,sku,upc,ean,jan,isbn,mpn)  AGAINST ('$suggestion_search_query' IN BOOLEAN MODE)
                    +{$relevance['tag']} *MATCH (pd.tag)  AGAINST ('$suggestion_search_query' IN BOOLEAN MODE) 
                    +{$relevance['name']} *MATCH (pd.name)  AGAINST ('$suggestion_search_query' IN BOOLEAN MODE) 
                    ";
                if( !empty($data['filter_description']) ){
                    $search_rankings.="
                        +{$relevance['description']} *MATCH (pd.description)  AGAINST ('$suggestion_search_query' IN BOOLEAN MODE)";
                }
                $sql_select.=",($search_rankings) rank";
                $sql_where.=" AND ( ($search_rankings)>$relevance_treshold ";
                if( $fallback_search_query ){
                    $fallback_description_search_query='';
                    if( !empty($data['filter_description']) ){
                        $fallback_description_search=" OR pd.description LIKE '%$fallback_search_query'";
                        
                    }
                    $sql_where.=" OR (model LIKE '%$fallback_search_query' OR pd.name  LIKE '%$fallback_search_query' $fallback_description_search )";
                }
                $sql_where.=")";
            }
            /////////////////////////////////////////////////////
            //CATEGORY
            /////////////////////////////////////////////////////
            if ( !empty($data['filter_category_id']) ) {
                $category_id=(int)$data['filter_category_id'];
                if ( !empty($data['filter_sub_category']) ) {
                    $sql_table.="
                    LEFT JOIN 
                        ".DB_PREFIX."product_to_category p2c ON p.product_id=p2c.product_id
                    LEFT JOIN
                        ".DB_PREFIX."category_path cp ON cp.category_id = p2c.category_id";
                    $sql_where.=" AND path_id=$category_id";
                } else {
                    $sql_table.="
                    LEFT JOIN 
                        ".DB_PREFIX."product_to_category p2c ON p.product_id=p2c.product_id";
                    $sql_where.=" AND category_id=$category_id";
                }
            }
            /////////////////////////////////////////////////////
            //FILTERS
            /////////////////////////////////////////////////////
            if ( !empty($data['filter_filter']) ) {
                $filter_ids=preg_replace('/[^\d,]|,{2,}|^,|,$/', '', $data['filter_filter']);
                $sql_filter_groups= "
                    SELECT 
                        filter_group_id, GROUP_CONCAT(filter_id) filter_list
                    FROM
                        ".DB_PREFIX."filter
                    WHERE
                        filter_id IN ($filter_ids)
                    GROUP BY filter_group_id";
                $result=$this->db->query($sql_filter_groups);
                if($result->num_rows){
                    $sql_group_match=[];
                    foreach($result->rows as $row){
                        $sql_group_match[]="MAX( filter_id IN ({$row['filter_list']}) )";
                    }
                    $sql_select.= ",".implode('*', $sql_group_match)." filter_match";
                }
                $sql_table.="
                     JOIN 
                ".DB_PREFIX."product_filter pf ON p.product_id=pf.product_id";              
            } else {
                $sql_select.= ",1 filter_match";
            }
            if ( !empty($data['filter_min']) ) {
                $min=(float) $data['filter_min'];
                $max=(float) $data['filter_max'];
                $sql_select.= ", IF(@discount,@discount>=$min AND @discount<=$max,price>=$min AND price<=$max) price_match";
            } else {
                $sql_select.= ", 1 price_match";
            }
            /////////////////////////////////////////////////////
            //MANUFACTURER
            /////////////////////////////////////////////////////
            if ( !empty($data['filter_manufacturer_id']) ) {
                $sql_where .= " AND p.manufacturer_id = '" . (int)$data['filter_manufacturer_id'] . "'";
            }
                
                
            $sql_matches="
                SELECT
                    $sql_select
                FROM
                    $sql_table
                WHERE
                    $sql_where
                GROUP BY p.product_id";
            $sql_set="SET @discount:=0;";
            $sql_clear="DROP TEMPORARY TABLE IF EXISTS tmp_matches;";
            $sql_fill="CREATE TEMPORARY TABLE tmp_matches AS ($sql_matches);";
            $this->db->query($sql_set);
            $this->db->query($sql_clear);
            $this->db->query($sql_fill);
            $this->registry->matches_filled=1;
            return true;
        }
        
        public function getTotalProducts($data=array()){
            $this->fillMatchedProducts($data);
            $sql_count="
                SELECT
                   COUNT(*) AS total
                FROM
                    tmp_matches
                WHERE
                    filter_match=1
                    AND price_match=1";
            $result=$this->db->query($sql_count);
            return $result->num_rows?$result->row['total']:0;
        }
        public function getProducts($data = array()){
            $this->fillMatchedProducts($data);
            /////////////////////////////////////////////////////
            //SORTING AND LIMITING
            /////////////////////////////////////////////////////
            switch( $data['sort'] ){
                case 'pd.name':
                    $sql_order="name ";
                    break;
                case 'p.model':
                    $sql_order="model ";
                    break;
                case 'p.quantity':
                    $sql_order="quantity ";
                    break;
                case 'p.price':
                    $sql_order=" (CASE WHEN special IS NOT NULL THEN special WHEN discount IS NOT NULL THEN discount ELSE price END) ";
                    break;
                case 'rating':
                    $sql_order=" rating ";
                    break;
                case 'p.date_added':
                    $sql_order="date_added ";
                    break;
                case 'p.sort_order':
                default :
                    if( !empty($data['filter_name']) ){
                        $sql_order="rank DESC ";
                    } else {
                        $sql_order="sort_order ";
                    }
            }
            if( isset($data['order']) ){
                $order_direction=' ';
                if( $data['order'] == 'DESC' ){
                    $order_direction=' DESC';
                }
                $sql_order.="$order_direction";
                if( $data['sort']!='pd.name' ){
                    $sql_order.=", LCASE(name) $order_direction";
                }
            }
            if (isset($data['start']) || isset($data['limit'])) {
                if ($data['start'] < 0) {
                    $data['start'] = 0;
                }
                if ($data['limit'] < 1) {
                    $data['limit'] = 20;
                }
                $sql_limit= (int) $data['start'] . "," . (int) $data['limit'];
            }
            $sql=" 
                SELECT
                    *
                FROM
                    tmp_matches
                WHERE
                    filter_match=1
                    AND price_match=1
                ORDER BY
                    $sql_order
                LIMIT
                    $sql_limit";
            $product_data = array();

            $query = $this->db->query($sql);

            foreach ($query->rows as $result) {
                $product_data[$result['product_id']] = $this->getProduct($result['product_id']);
            }

            return $product_data;
        }

            ]]></add>
	</operation>
    </file>
</modification>
