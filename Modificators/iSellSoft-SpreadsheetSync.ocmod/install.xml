<modification>
    <name><![CDATA[iSellSoft-SuperSync]]></name>
    <code><![CDATA[iSellSoft-SuperSync]]></code>
    <version>1.0</version>
    <author>iSellSoft</author>
    <file path="admin/controller/common/column_left.php">
        <operation error="skip">
            <search><![CDATA[if ($this->user->hasPermission('access', 'catalog/recurring')) {
                        ]]>
            </search>
            <add position="before" offset="0"><![CDATA[ 
	   					if ($this->user->hasPermission('access', 'catalog/product')) {
							$catalog[] = array(
								'name'	   => $this->language->get('text_supersync'),
								'href'     => $this->url->link('extension/module/iss_superparserlist', 'user_token=' . $this->session->data['user_token'], true),
								'children' => array()		
							);
						}
			]]></add>
        </operation>
    </file>
    <file path="admin/language/en-gb/common/column_left.php">
        <operation error="skip">
            <search><![CDATA[ 
				$_['text_other_status']      = 'Other Statuses';
                        ]]>
            </search>
            <add position="before" offset="0"><![CDATA[ 
	   					$_['text_supersync']         = 'SuperSync';
			]]></add>
        </operation>
    </file>
  <file  path="admin/model/catalog/product.php">
	<operation error="skip">
	  <search><![CDATA[public function editProduct($product_id, $data) {
                        ]]>
            </search>
	  <add position="before" offset="0"><![CDATA[
public function liteEditProduct($product_id, $data) {
        $this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int) $data['quantity'] . "', minimum = '" . (int) $data['minimum'] . "', subtract = '" . (int) $data['subtract'] . "', stock_status_id = '" . (int) $data['stock_status_id'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int) $data['manufacturer_id'] . "', shipping = '" . (int) $data['shipping'] . "', price = '" . (float) $data['price'] . "', points = '" . (int) $data['points'] . "', weight = '" . (float) $data['weight'] . "', weight_class_id = '" . (int) $data['weight_class_id'] . "', length = '" . (float) $data['length'] . "', width = '" . (float) $data['width'] . "', height = '" . (float) $data['height'] . "', length_class_id = '" . (int) $data['length_class_id'] . "', status = '" . (int) $data['status'] . "', tax_class_id = '" . (int) $data['tax_class_id'] . "', sort_order = '" . (int) $data['sort_order'] . "', date_modified = NOW() WHERE product_id = '" . (int) $product_id . "'");

        if (isset($data['image'])) {
            $this->db->query("UPDATE " . DB_PREFIX . "product SET image = '" . $this->db->escape($data['image']) . "' WHERE product_id = '" . (int) $product_id . "'");
        }
        
        if (isset($data['product_store'])) {
            foreach ($data['product_store'] as $store_id) {
                $this->db->query("UPDATE " . DB_PREFIX . "product_to_store SET store_id = '" . (int) $store_id . "' WHERE product_id = '" . (int) $product_id . "'");
            }
        }
        
        $this->db->query("DELETE FROM " . DB_PREFIX . "product_description WHERE product_id = '" . (int) $product_id . "'");

        foreach ($data['product_description'] as $language_id => $value) {
            $this->db->query("INSERT INTO " . DB_PREFIX . "product_description SET product_id = '" . (int) $product_id . "', language_id = '" . (int) $language_id . "', name = '" . $this->db->escape($value['name']) . "', description = '" . $this->db->escape($value['description']) . "', tag = '" . $this->db->escape($value['tag']) . "', meta_title = '" . $this->db->escape($value['meta_title']) . "', meta_description = '" . $this->db->escape($value['meta_description']) . "', meta_keyword = '" . $this->db->escape($value['meta_keyword']) . "'");
        }

        $this->db->query("DELETE FROM " . DB_PREFIX . "product_attribute WHERE product_id = '" . (int) $product_id . "'");

        if (!empty($data['product_attribute'])) {
            foreach ($data['product_attribute'] as $product_attribute) {
                if ($product_attribute['attribute_id']) {
                    // Removes duplicates
                    $this->db->query("DELETE FROM " . DB_PREFIX . "product_attribute WHERE product_id = '" . (int) $product_id . "' AND attribute_id = '" . (int) $product_attribute['attribute_id'] . "'");

                    foreach ($product_attribute['product_attribute_description'] as $language_id => $product_attribute_description) {
                        $this->db->query("INSERT INTO " . DB_PREFIX . "product_attribute SET product_id = '" . (int) $product_id . "', attribute_id = '" . (int) $product_attribute['attribute_id'] . "', language_id = '" . (int) $language_id . "', text = '" . $this->db->escape($product_attribute_description['text']) . "'");
                    }
                }
            }
        }

        $this->db->query("DELETE FROM " . DB_PREFIX . "product_option WHERE product_id = '" . (int) $product_id . "'");
        $this->db->query("DELETE FROM " . DB_PREFIX . "product_option_value WHERE product_id = '" . (int) $product_id . "'");

        if (isset($data['product_option'])) {
            foreach ($data['product_option'] as $product_option) {
                if ($product_option['type'] == 'select' || $product_option['type'] == 'radio' || $product_option['type'] == 'checkbox' || $product_option['type'] == 'image') {
                    if (isset($product_option['product_option_value'])) {
                        $this->db->query("INSERT INTO " . DB_PREFIX . "product_option SET product_option_id = '" . (int) $product_option['product_option_id'] . "', product_id = '" . (int) $product_id . "', option_id = '" . (int) $product_option['option_id'] . "', required = '" . (int) $product_option['required'] . "'");

                        $product_option_id = $this->db->getLastId();

                        foreach ($product_option['product_option_value'] as $product_option_value) {
                            $this->db->query("INSERT INTO " . DB_PREFIX . "product_option_value SET product_option_value_id = '" . (int) $product_option_value['product_option_value_id'] . "', product_option_id = '" . (int) $product_option_id . "', product_id = '" . (int) $product_id . "', option_id = '" . (int) $product_option['option_id'] . "', option_value_id = '" . (int) $product_option_value['option_value_id'] . "', quantity = '" . (int) $product_option_value['quantity'] . "', subtract = '" . (int) $product_option_value['subtract'] . "', price = '" . (float) $product_option_value['price'] . "', price_prefix = '" . $this->db->escape($product_option_value['price_prefix']) . "', points = '" . (int) $product_option_value['points'] . "', points_prefix = '" . $this->db->escape($product_option_value['points_prefix']) . "', weight = '" . (float) $product_option_value['weight'] . "', weight_prefix = '" . $this->db->escape($product_option_value['weight_prefix']) . "'");
                        }
                    }
                } else {
                    $this->db->query("INSERT INTO " . DB_PREFIX . "product_option SET product_option_id = '" . (int) $product_option['product_option_id'] . "', product_id = '" . (int) $product_id . "', option_id = '" . (int) $product_option['option_id'] . "', value = '" . $this->db->escape($product_option['value']) . "', required = '" . (int) $product_option['required'] . "'");
                }
            }
        }
        
        if (isset($data['product_image'])) {
            $this->db->query("DELETE FROM " . DB_PREFIX . "product_image WHERE product_id = '" . (int) $product_id . "'");
            foreach ($data['product_image'] as $product_image) {
                $this->db->query("INSERT INTO " . DB_PREFIX . "product_image SET product_id = '" . (int) $product_id . "', image = '" . $this->db->escape($product_image['image']) . "', sort_order = '" . (int) $product_image['sort_order'] . "'");
            }
        }
        
        
        
        if (isset($data['product_category'])) {
            $this->property_sync(DB_PREFIX . "product_to_category","category_id",$product_id,$data['product_category']);
        }
        if (isset($data['product_filter'])) {
            $this->property_sync(DB_PREFIX . "product_filter","filter_id",$product_id,$data['product_filter']);
        }
        
        $this->db->query("DELETE FROM " . DB_PREFIX . "product_special WHERE product_id = '" . (int) $product_id . "'");

        if (isset($data['product_special'])) {
            foreach ($data['product_special'] as $product_special) {
                $this->db->query("INSERT INTO " . DB_PREFIX . "product_special SET product_id = '" . (int) $product_id . "', customer_group_id = '" . (int) $product_special['customer_group_id'] . "', priority = '" . (int) $product_special['priority'] . "', price = '" . (float) $product_special['price'] . "', date_start = '" . $this->db->escape($product_special['date_start']) . "', date_end = '" . $this->db->escape($product_special['date_end']) . "'");
            }
        }
        
        /*$this->db->query("DELETE FROM " . DB_PREFIX . "product_to_category WHERE product_id = '" . (int) $product_id . "'");

        if (isset($data['product_category'])) {
            foreach ($data['product_category'] as $category_id) {
                $this->db->query("INSERT INTO " . DB_PREFIX . "product_to_category SET product_id = '" . (int) $product_id . "', category_id = '" . (int) $category_id . "'");
            }
        }

        $this->db->query("DELETE FROM " . DB_PREFIX . "product_filter WHERE product_id = '" . (int) $product_id . "'");

        if (isset($data['product_filter'])) {
            foreach ($data['product_filter'] as $filter_id) {
                $this->db->query("INSERT INTO " . DB_PREFIX . "product_filter SET product_id = '" . (int) $product_id . "', filter_id = '" . (int) $filter_id . "'");
            }
        }*/
    }
    private function property_sync($table,$property_id_field,$product_id,$new_property_ids){
        $old_property_ids=[];
        $result=$this->db->query("SELECT GROUP_CONCAT($property_id_field) ids FROM $table WHERE product_id='$product_id'");
        if( $result ){
            $old_property_ids= explode(',',$result->row['ids']);
        }
        
        //echo '----------'.$table;
        
        //print_r($old_property_ids);
        foreach($new_property_ids as $property_id){
            if ( ($index = array_search($property_id, $old_property_ids)) !== false ) {
                unset($old_property_ids[$index]);
                continue;
            }
            //print_r($old_property_ids);
            $this->db->query("INSERT INTO $table SET product_id = '" . (int) $product_id . "', $property_id_field = '" . (int) $property_id . "'");
        }
        if( count($old_property_ids)>0 ){
            $csv_ids=implode(',',$old_property_ids);
            if($csv_ids){
                $this->db->query("DELETE FROM $table WHERE product_id = '" . (int) $product_id . "' AND $property_id_field IN ($csv_ids)");
            }
            
        }
    }
		   ]]></add>
	
	</operation>
  </file> 
  <file  path="admin/language/tr-tr/common/column_left.php">
	<operation error="skip">
	  <search><![CDATA[// Text]]></search>
	  <add position="after" offset="0"><![CDATA[$_['text_supersync']  = 'Toplu Ürün İthalatı';]]></add>
	</operation>
  </file>
  <file  path="admin/language/en-gb/common/column_left.php">
	<operation error="skip">
	  <search><![CDATA[// Text]]></search>
	  <add position="after" offset="0"><![CDATA[$_['text_supersync']  = 'Bulk Product Import';]]></add>
	</operation>
  </file>
</modification>